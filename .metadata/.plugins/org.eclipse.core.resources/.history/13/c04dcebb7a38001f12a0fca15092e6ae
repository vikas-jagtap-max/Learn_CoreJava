package AvoidBreakingSingletonDesignPattern;

public class SingletonClass {
	private static SingletonClass instance = null;

	private SingletonClass() {
		
	}

	// Global access point to get the Singleton instance
	public static SingletonClass getInstance() {
		if (instance == null) {
			// 1)To make this thread safe, use double locking as below and make SingleClass
			// Volatile
			synchronized (SingletonClass.class) {
				if (instance == null) {
					System.out.println("Creating first instance of Singleton Class");
					instance = new SingletonClass();
				}

			}

		}
		return instance;
	}

	private static void Synchronized(Class<SingletonClass> class1) {

	}

	//
	@Override
	protected Object clone() throws CloneNotSupportedException {
		throw new CloneNotSupportedException();
	}

}
